
package reference;
import javafx.application.Application;
import javafx.event.*;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.collections.*;
import javafx.scene.shape.*;
import java.lang.Iterable;
import javafx.collections.FXCollections; //2
import javafx.collections.ObservableList; //3
import javafx.geometry.Insets;
import java.sql.*;
//import oracle.jdbc.pool.*;
import java.util.*;
import static javafx.application.Application.launch;
public class SMSApp extends Application {
    
    
    
  public void sendDBCommand(String sqlQuery)
    {
        
        String URL = "jdbc:oracle:thin:@localhost:1521:XE";
        String userID = "system"; 
        String userPASS = "2Bking48"; 
        OracleDataSource ds;
        
        
        System.out.println(sqlQuery);
        
        // Lets try to connect
        try
        {
            // instantiate a new data source object
            ds = new OracleDataSource();
            // database locatation
            ds.setURL(URL);
            // Send the user/pass and get an open connection.
            dbConn = ds.getConnection(userID,userPASS);
          
            commStmt = dbConn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
         
            dbResults = commStmt.executeQuery(sqlQuery); // Sends the Query to the DB
            
        }
        catch (SQLException e)
        {
            System.out.println(e.toString());
        }
    }


// This is our SQL Query\
  public void insertCourse()
  {
      String sqlQuery = "INSERT INTO SYSTEM.COURSE (COURSENAME, COURSEBLDG, COURSEROOM, COURSECAPCITY)";
      sqlQuery += " (" + txtCourseName.getText() + ",";
      sqlQuery += " (" + cboBuilding.getValue() + ","; //unsure
      sqlQuery += " (" + txtRoom.getText() + ",";
      sqlQuery += " (" + txtMaxCapacity.getText() + "\'";
      
      sendDBCommand(sqlQuery);
  }
  //uNSURE WHAT TO DO ABOUT PRIMARY KEYS (ID'S)
  public void insertInstructor()
  {
      String sqlQuery = " INSERT INTO SYSTEM.INSTRCTOR ( INSTRNAME, INSTRPREFIX, INSTROFFICE, INSTRDEPT, INSTREMAIL)";
      sqlQuery += "(" + txtInstructName.getText() + ",";
      sqlQuery += "(" + cboPrefix.getValue() + ",";
      sqlQuery += "(" + txtOffice.getText() + ",";
      sqlQuery += "(" + txtDepartment.getText() + ",";
      sqlQuery += "(" + txtInstructEmail.getText() + "\'";
      sendDBCommand(sqlQuery);
  }
  
 public void insertStudent()
         {
              String sqlQuery = " INSERT INTO SYSTEM.STUDENT ( STUDENTNAME, STUDENTYEAR, STUDENTMAJOR, STUDENTGPA, STUDENTEMAIL)";
      sqlQuery += "(" + txtStudentName.getText() + ",";
      sqlQuery += "(" + txtStudentYear.getText() + ",";
      sqlQuery += "(" + cbo.getValue() + ",";
      sqlQuery += "(" + txtStudentMajor.getText() + ",";
      sqlQuery += "(" + txtStudentGPA.getText() + ",";
      sqlQuery += "(" + txtStudentEmail.getText() + "\'";
      sendDBCommand(sqlQuery);
             
         } 
  
  


  
  
  
    
    
	
	public static ObservableList studentData = FXCollections.observableArrayList();
	ListView<Student> listStudent = new ListView<>(studentData);
    	
	public static ObservableList instructorData = FXCollections.observableArrayList();
	ListView<Instructor> listInstructor = new ListView<>(instructorData);
    	
	public static ObservableList courseData = FXCollections.observableArrayList();
	ListView<Course> listCourse = new ListView<>(courseData);
	
	
	public String[] years = {"Freshman", "Sophomore", "Junior", "Senior"}; //1
	public String[] buildings = {"Showker", "Chandler", "Burris Hall"};
	public String[] prefixes = {"Dr.", "Ms.", "Mrs.", "Mr."};
	// Add Student:
	TextField txtAddStudent = new TextField();
	TextField txtStudentName = new TextField();
	TextField txtStudentYear = new TextField();
	ComboBox <String> cbo = new ComboBox<>();//4
	TextField txtStudentMajor = new TextField();
	TextField txtStudentGPA = new TextField();
	TextField txtStudentEmail = new TextField();
	Label lblAddStudent = new Label("Add Student:");
	Label lblStudentName = new Label("Name: ");
	Label lblStudentYear = new Label("Year: ");
	//cboStudentYear.getItems().addAll("Freshman", "Sophomore", "Junior", "Senior");
	Label lblStudentMajor = new Label("Major: ");
	Label lblStudentGPA = new Label("GPA: ");
	Label lblStudentEmail = new Label("Email: ");
	Button btnStudent = new Button("Add Student ->");
	
	//Add Course
	
	TextField txtAddCourse = new TextField();
	TextField txtCourseName = new TextField();
	ComboBox <String> cboBuilding = new ComboBox<>();
	TextField txtRoom = new TextField();
	TextField txtMaxCapacity = new TextField();
	Label lblAddCourse = new Label("Add Course:");
	Label lblCourseName = new Label("Name: ");
	Label lblBuilding = new Label("Building: ");
	Label lblRoom = new Label ("Room: ");
	Label lblMaxCapacity = new Label("Max Capacity: ");
	Button btnCourse = new Button("Add Course ->");
	
	//Add Instructor
	
	TextField txtAddInstruct = new TextField();
	TextField txtInstructName = new TextField();
	ComboBox <String> cboPrefix = new ComboBox<>();
	TextField txtOffice = new TextField();
	TextField txtDepartment = new TextField();
	TextField txtInstructEmail = new TextField();
	Label lblAddInstruct = new Label("Add Instructor: ");
	Label lblInstructName = new Label("Name: ");
	Label lblPrefix = new Label("Prefix: ");
	Label lblOffice = new Label("Office: ");
	Label lblDepartment = new Label("Department: ");
	Label lblInstructEmail= new Label("Email: ");
	Button btnInstruct = new Button("Add Instructor ->");
	
	//Build a Course
	ComboBox <String> cboAddStudent = new ComboBox<>();
	ComboBox <String> cboToCourse = new ComboBox<>();
	CheckBox chboNewInstruct = new CheckBox();
	ComboBox cboInstructIs = new ComboBox<>();
	Label lblBuildCourse = new Label("Build a Course: ");;
	RadioButton rdoAddStudent = new RadioButton("Add Student"); // new
	RadioButton rdoRemoveStudent = new RadioButton("Remove Student"); // new
	Label lblAddStudentToCourse = new Label("Choose Student: "); // edited
	Label lblToCourse = new Label("Choose Course: "); // edited
	Label lblNewInstruct = new Label("New Instructor?");
	Label lblInstructIs = new Label("Instructor is: ");
	Button btnUpdateCourse = new Button("Save Changes"); // edited
	Label lblDisplayList = new Label ("Display List: ");
    	//Button btnDisplayList = new Button ("Display");
	Button btnDisplayStudent = new Button ("Enrolled Students");
	Button btnDisplayCourse = new Button ("Offered Courses");
	ToggleGroup rdoCRUDGroup = new ToggleGroup(); // new

	
	TextArea txtaOutput = new TextArea();
	
	Connection dbConn;
	Statement commStmt;
	ResultSet dbResults;
                
        String roster ="";
	String courseDescrip="";

        
        
	
	
	@Override
	public void start(Stage primaryStage) {
        
        loadDataFromDB();
        cboAddStudent.getItems().addAll(studentData);
        
        
    	GridPane primaryPane = new GridPane();
        GridPane studentPane = new GridPane();
        GridPane coursePane = new GridPane();
        GridPane instructorPane = new GridPane();
        GridPane buildCoursePane = new GridPane();
      	GridPane outputPane = new GridPane();
    	
    	primaryPane.add(studentPane, 0,0);
    	primaryPane.add(coursePane, 1,0);
    	primaryPane.add(instructorPane, 2,0);
    	primaryPane.add(buildCoursePane, 0,1);
    	primaryPane.add(outputPane, 1, 1, 2, 1);
	
    	// Adding Student controls to our controls GridPane
    	primaryPane.setAlignment(Pos.CENTER);
    	studentPane.add(lblAddStudent, 0, 0, 2, 1);
    	studentPane.add(lblStudentName, 0, 1);
    	studentPane.add(lblStudentYear, 0, 2);
    	studentPane.add(lblStudentMajor, 0, 3);
    	studentPane.add(lblStudentGPA, 0, 4);
    	studentPane.add(lblStudentEmail, 0, 5);
    	studentPane.add(txtStudentName, 1, 1);
    	studentPane.add(cbo, 1, 2); //5
    	studentPane.add(txtStudentMajor, 1, 3);
    	studentPane.add(txtStudentGPA, 1, 4);
    	studentPane.add(txtStudentEmail, 1, 5);
    	studentPane.add(btnStudent, 1, 6);
    	
    	//Adding Course controls
    	coursePane.add(lblAddCourse, 2, 0, 2, 1);
    	coursePane.add(lblCourseName, 2, 1);
    	coursePane.add(lblBuilding, 2, 2);
    	coursePane.add(lblRoom, 2, 3);
    	coursePane.add(lblMaxCapacity, 2, 4);
    	coursePane.add(txtCourseName, 3, 1);
    	coursePane.add(cboBuilding, 3, 2);
    	coursePane.add(txtRoom, 3, 3);
    	coursePane.add(txtMaxCapacity, 3, 4);
    	coursePane.add(btnCourse, 3, 5);
    	
   	
    	//Adding Instructor controls
    	
    	instructorPane.add(lblAddInstruct, 4, 0, 2, 1);
    	instructorPane.add(lblInstructName, 4 ,1);
    	instructorPane.add(lblPrefix, 4, 2);
    	instructorPane.add(lblOffice, 4, 3);
    	instructorPane.add(lblDepartment, 4, 4);
    	instructorPane.add(lblInstructEmail, 4, 5);
    	instructorPane.add(txtInstructName, 5, 1);
    	instructorPane.add(cboPrefix, 5, 2);
    	instructorPane.add(txtOffice, 5, 3);
    	instructorPane.add(txtDepartment, 5, 4);
    	instructorPane.add(txtInstructEmail, 5, 5);
    	instructorPane.add(btnInstruct, 5, 6);
    	
    	//Adding Build a Course
    	
    	buildCoursePane.add(lblBuildCourse, 0, 7, 2, 1);
    	rdoAddStudent.setToggleGroup(rdoCRUDGroup); // new
    	rdoRemoveStudent.setToggleGroup(rdoCRUDGroup); // new
    	buildCoursePane.add(rdoAddStudent, 0, 8); // new
    	buildCoursePane.add(rdoRemoveStudent, 1, 8); // new
    	buildCoursePane.add(lblAddStudentToCourse, 0, 9);
    	buildCoursePane.add(lblToCourse, 0, 10);
    	buildCoursePane.add(chboNewInstruct, 0, 11);
    	buildCoursePane.add(lblInstructIs, 0, 12);
    	buildCoursePane.add(cboAddStudent, 1, 9);
    	buildCoursePane.add(cboToCourse, 1, 10);
    	buildCoursePane.add(lblNewInstruct, 1, 11);
        buildCoursePane.add(cboInstructIs, 1, 12);
        buildCoursePane.add(btnUpdateCourse, 1, 13);
        buildCoursePane.add(btnDisplayStudent, 0, 14);
        buildCoursePane.add(btnDisplayCourse, 1, 14);

        
        //cboDisplayList.getItems().addAll(
        //"Enrolled Students",
        //"Offered Courses",
        //"Current Instructors");
    	
    	txtaOutput.setMaxWidth(500);
    	outputPane.add(txtaOutput, 0, 0);
    	primaryPane.setHgap(15);//
    	primaryPane.setVgap(5);//
    	primaryPane.setPadding(new Insets(20, 20, 20, 20));
    	
    	ObservableList <String> yearList = FXCollections.observableArrayList(years);//6
    	cbo.getItems().addAll(years); //7
    	ObservableList <String> buildingList = FXCollections.observableArrayList(buildings);
    	cboBuilding.getItems().addAll(buildings);
    	ObservableList <String> prefixList = FXCollections.observableArrayList(prefixes);
    	cboPrefix.getItems().addAll(prefixes);
    	
    	cboInstructIs.setVisible(false);
    	
    	
    	Scene primaryScene = new Scene(primaryPane,800,800);
    	primaryStage.setTitle("SMS App");
    	primaryStage.setScene(primaryScene);
    	primaryStage.show();
        
    	
    	btnStudent.setOnAction(e -> {
        	// nested error checking
        	boolean valid = true;
        	boolean emptyCBO = cbo.getSelectionModel().isEmpty();
        	String studentGPA = txtStudentGPA.getText();
        	double d = 0.0;
        	int i;
        	//int count = 0;
        	if (txtStudentEmail.getText().indexOf('@') == -1)
        	{
            	txtaOutput.setText("Please make sure your email is valid");
            	valid = false;
        	}
        	if (txtStudentEmail.getText() == null || txtStudentEmail.getText().trim().isEmpty())
        	{
            	txtaOutput.setText("Please enter your email address");
            	valid = false;
        	}
        	if (txtStudentGPA.getText() == null || txtStudentGPA.getText().trim().isEmpty())
        	{
            	txtaOutput.setText("Please enter your GPA");
            	valid = false;
        	}
        	else
        	{
            	d = Double.valueOf(studentGPA);
            	if (d <= 0.0 || d >= 5.0)
            	{
                	txtaOutput.setText("Please enter GPA between 0.0 and 5.0");
            	}
        	}
        	if (txtStudentMajor.getText() == null || txtStudentMajor.getText().trim().isEmpty())
        	{
            	txtaOutput.setText("Please enter your major");
            	valid = false;
        	}
        	if(cbo.getValue() == "Freshman")
            	i = 1;
        	else if (cbo.getValue() == "Sophomore")
            	i = 2;
        	else if (cbo.getValue() == "Junior")
            	i = 3;
        	else
            	i = 4;
            	
        	if(emptyCBO == true)
        	{
            	txtaOutput.setText("Please select your year");
            	valid = false;
        	}
        	if(txtStudentName.getText().contains(" ") == false)
        	{
            	txtaOutput.setText("Please enter a first and last name separated"
                    	+ "by a space.");
        	}
        	if(txtStudentName.getText() == null || txtStudentName.getText().trim().isEmpty())
        	{
            	txtaOutput.setText("Please enter your name");
            	valid = false;
        	}
        	if (valid)
        	{
            	txtaOutput.setText("");
            	studentData.add(new Student(txtStudentName.getText(), i, txtStudentMajor.getText(), d, txtStudentEmail.getText()));
            	ObservableList <ArrayList> studentList = FXCollections.observableArrayList(studentData);
            	
               	cboAddStudent.getItems().removeAll(cboAddStudent.getItems());
               	cboAddStudent.getItems().addAll(studentData);
                	//count++;//addAll(studentData);
               	txtStudentName.clear();
            	cbo.getSelectionModel().clearSelection();
            	txtStudentMajor.clear();
            	txtStudentGPA.clear();
            	txtStudentEmail.clear();
                
        	}
        	
        	
        	
             	
        	
        	
        	
        	
        	
        	// populate student array list with a student with the inputs from the user entries
       	// clear input fields after
        	
    	});
    	
    	btnCourse.setOnAction(e ->{
        	boolean valid = true;
        	boolean emptyCBO = cboBuilding.getSelectionModel().isEmpty();
        	int room = 0;
        	
        	
        	if (txtMaxCapacity.getText() == null || txtMaxCapacity.getText().trim().isEmpty())
        	{
            	txtaOutput.setText("Please enter a max capacity value");
            	valid = false;
        	}
        	else
            	room = Integer.valueOf(txtMaxCapacity.getText());
        	if (txtRoom.getText() == null || txtRoom.getText().trim().isEmpty())
        	{
            	txtaOutput.setText("Please enter a room");
            	valid = false;
        	}
                        	
        	if (emptyCBO)
        	{
            	txtaOutput.setText("Please select a building");
            	valid = false;
        	}
        	if(txtCourseName.getText() == null || txtCourseName.getText().trim().isEmpty())
        	{
            	txtaOutput.setText("Please enter the course name");
        	}
        	
        	
        	
        	if(valid)
        	{
            	txtaOutput.setText("");
            	courseData.add(new Course(txtCourseName.getText(), cboBuilding.getValue(), txtRoom.getText(), room));
            	ObservableList <ArrayList> courseList = FXCollections.observableArrayList(courseData);
            	cboToCourse.getItems().removeAll(cboToCourse.getItems());
            	cboToCourse.getItems().addAll(courseData);
            	txtMaxCapacity.clear();
            	txtRoom.clear();
            	txtCourseName.clear();
            	cboBuilding.getSelectionModel().clearSelection();
        	}
    	});
    	
    	btnInstruct.setOnAction(e -> {
        	
        	boolean emptyCBO = cboPrefix.getSelectionModel().isEmpty();
        	boolean valid = true;
        	
        	
        	
        	
        	
        	if (txtInstructEmail.getText().indexOf('@') == -1)
        	{
            	txtaOutput.setText("Please make sure your email is valid");
            	valid = false;
        	}
        	if (txtInstructEmail.getText() == null || txtInstructEmail.getText().trim().isEmpty())
        	{
            	txtaOutput.setText("Please enter the instructor's email");
            	valid = false;
        	}
        	if (txtDepartment.getText() == null || txtDepartment.getText().trim().isEmpty())
        	{
            	txtaOutput.setText("Please enter a department");
            	valid = false;
        	}
        	if (txtOffice.getText() == null || txtOffice.getText().trim().isEmpty())
        	{
            	txtaOutput.setText("Please enter an office");
            	valid = false;
        	}
        	
        	if (emptyCBO)
        	{
            	txtaOutput.setText("Please select a prefix");
            	valid = false;
        	}
        	if(txtInstructName.getText() == null || txtInstructName.getText().trim().isEmpty())
        	{
            	txtaOutput.setText("Please enter an instructor name");
            	valid = false;
        	}
        	if (valid)
        	{
            	txtaOutput.setText("");
            	instructorData.add(new Instructor(txtInstructName.getText(),
                    	cboPrefix.getValue(), txtOffice.getText(), txtDepartment.getText(),
                    	txtInstructEmail.getText()));
            	//ObservableList <ArrayList> instructorList = FXCollections.observableArrayList(instructorData);
            	cboInstructIs.getItems().removeAll(cboInstructIs.getItems());
            	cboInstructIs.getItems().addAll(instructorData);
            	
            	/*if(chboNewInstruct.isSelected() == true)
            	{
               	cboInstructIs.setVisible(true);
            	
            	ObservableList <ArrayList> instructorList=FXCollections.observableArrayList(instructorData);
            	cboInstructIs.getItems().removeAll(cboInstructIs.getItems());
            	cboInstructIs.getItems().addAll(instructorData);
            	}*/
           	
            	txtInstructEmail.clear();
            	cboPrefix.getSelectionModel().clearSelection();
            	txtDepartment.clear();
            	txtOffice.clear();
            	txtInstructName.clear();

}
    	});
    	
// check button and combo box (remove highlighted part from under instructor button)
chboNewInstruct.setOnAction(e -> {
        	
        	//if (chboNewInstruct.isSelected() == false){
            	//cboInstructIs.setValue("");
            	
        	if (chboNewInstruct.isSelected() == true) {
            	cboInstructIs.setVisible(true);
            	/*instructorData.add(new Instructor(txtInstructName.getText(),
                    	cboPrefix.getValue(), txtOffice.getText(), txtDepartment.getText(),
                    	txtInstructEmail.getText())); */
            	//ObservableList <ArrayList> instructorList=FXCollections.observableArrayList(instructorData);
            	//cboInstructIs.getItems().removeAll(cboInstructIs.getItems());
            	//cboInstructIs.getItems().addAll(instructorData);
        	}
        	if(chboNewInstruct.isSelected() == false){
            	cboInstructIs.setVisible(false);
        	}
        	
        	
    	});
btnUpdateCourse.setOnAction(e -> {
	
	boolean emptyStudent = cboAddStudent.getSelectionModel().isEmpty();
	boolean emptyCourse = cboToCourse.getSelectionModel().isEmpty();
	boolean emptyInstruct = cboInstructIs.getSelectionModel().isEmpty();
	
    	Course c = (Course)courseData.get(cboToCourse.getSelectionModel().getSelectedIndex());
    	Student s = (Student)studentData.get(cboAddStudent.getSelectionModel().getSelectedIndex());
    	Instructor i = (Instructor)instructorData.get(cboInstructIs.getSelectionModel().getSelectedIndex());
            	
    	if (rdoAddStudent.isSelected()) // new
    	{
        	if (emptyStudent == false && emptyInstruct == false)
        	{
            	c.enrollStudent(s);
            	c.assignInstructor(i);
            	roster = c.getRoster();
            	courseDescrip = c.fullDescribe() + "\n";
            	txtaOutput.setText(courseDescrip);
            	txtaOutput.appendText("\n");
            	txtaOutput.appendText(roster);
        	}
        	// if student combobox is selcted but instructor is not
        	else if(emptyStudent == false && emptyInstruct == true)
        	{
            	c.enrollStudent(s);
            	roster = c.getRoster();        	
            	txtaOutput.appendText(courseDescrip);
            	txtaOutput.appendText("\n");
            	txtaOutput.appendText(roster);
        	}
        	// if Instructor combobox is selcted but student is not
        	else if (emptyInstruct == false && emptyStudent == true)
        	{
            	//txtaOutput.setText("");
            	c.assignInstructor(i);
            	courseDescrip = c.fullDescribe() + "\n";
            	txtaOutput.setText(courseDescrip);
            	txtaOutput.appendText("\n");
            	txtaOutput.appendText(roster);
        	}  

        	
    	} // end of if statement where addstudent is selected
    	else if (rdoRemoveStudent.isSelected())
    	{
        	txtaOutput.setText("");
        	c.removeStudent(s.getStudentID());
        	roster = c.getRoster();
        	courseDescrip = c.fullDescribe() + "\n";
        	txtaOutput.setText(courseDescrip);
        	txtaOutput.appendText("\n");
        	txtaOutput.appendText(roster);
    	}
    	//int studentID = s.getStudentID();
    	//c.removeStudent(studentID);
    	//String str = "Student ID" + studentID;
    	//txtaOutput.appendText(str);
    	
    	cboAddStudent.getSelectionModel().clearSelection();
    	cboToCourse.getSelectionModel().clearSelection();
    	cboInstructIs.getSelectionModel().clearSelection();
    	cboInstructIs.setVisible(false);
    	chboNewInstruct.setSelected(false);
    	rdoAddStudent.setSelected(false);
    	rdoRemoveStudent.setSelected(false);
        	
    	
// add remove student here
	});


btnDisplayStudent.setOnAction(e -> {
	txtaOutput.setText("");
	boolean emptyStudent = cboAddStudent.getSelectionModel().isEmpty();
	boolean emptyCourse = cboToCourse.getSelectionModel().isEmpty();
	boolean emptyInstruct = cboInstructIs.getSelectionModel().isEmpty();
	boolean valid = true;
	
    	ArrayList <String> studentList = new ArrayList<>();
        
        
        if (valid)
	{
    	
        for (int i=0; i < courseData.size(); i++ ){
            Course c2 = (Course) courseData.get(i);
            studentList.add(i, c2.displayStudents());
            
            txtaOutput.setText("");
            txtaOutput.appendText(studentList.get(i));
            //txtaOutput.appendText(studentList
            
        } 
        	
	}
    	
});
btnDisplayCourse.setOnAction(e -> {
    
    
    String courseList1 = "";
    //ArrayList <String> courseList = new ArrayList<>();
    
    
    
    for (int i=0; i < courseData.size(); i++ ){
            Course c2 = (Course) courseData.get(i);
            //courseList.add(i, c2.displayCourses());
            courseList1 += c2.displayCourses() + "\n";
            
            txtaOutput.setText("");
            txtaOutput.appendText(courseList1);
    
    }    
    
    
});




    	
    	
}
        @Override
        public void stop(){
            String sData;
            String cData;
            String iData;
            String eData;
            String cQuery;
            String sQuery;
            String iQuery;
            String eQuery;
       
    	
    	for(int i = 0; i<courseData.size(); i++){
            Course c = (Course) courseData.get(i);
            Instructor ins = (Instructor)c.getAssignedInstructor();
            cData = "('" + c.getCourseID() + "', '" + c.getCourseName()
                	+ "', '" + c.getCourseBldg() + "', '" + c.getCourseRoom()
                	+ "', '" + c.getCapacity() + "')";
            cQuery = "INSERT INTO COURSE (COURSEID, COURSENAME, COURSEBLDG, COURSEROOM, COURSECAPACITY) VALUES " + cData;
            iData = "('" + ins.getInstId() + "', '" + ins.getInstName()
                	+ "', '" + ins.getInstPre() + "', '" + ins.getInstOffice()
                	+ "', '" + ins.getInstDept() + "', '" + ins.getInstEmail() 
                        + "')";
            iQuery = "INSERT INTO INSTRUCTOR (INSTRID, INSTRNAME, INSTPREFIX, INSTROFFICE, INSTRDEPT, INSTREMAIL) VALUES " + iData;
            sendDBCommand(cQuery);
            sendDBCommand(iQuery);

            for(int j = 0; j < c.getNumStudents(); j++)
            {
                
                
                Student s = (Student)c.getEnrolledStudents(j);
                
        	sData = "('" + s.getStudentID() + "', '" + s.getName()
                	+ "', '" + s.getStudentYear() + "', '" + s.getStudentMajor() 
                	+ "', '" + s.getGPA() + "', '" + s.getStudentEmail() + "', '" + c.getCourseID()
                        + "')";
                
                System.out.println(sData);
        	sQuery = "INSERT INTO STUDENT(STUDENTID, STUDENTNAME, STUDENTYEAR, STUDENTMAJOR, STUDENTGPA, STUDENTEMAIL) VALUES " + sData;
                eData = "('" + c.getCourseID() + "', '" + s.getStudentID() + "')";
                eQuery = "INSERT INTO STUDENTENROLLMENT (COURSEID, STUDENTID) VALUES " + eData;
                
            sendDBCommand(sQuery);
            sendDBCommand(eQuery);
            }
    	}
    	
	}

	public static void main(String[] args) {
    	launch(args);
	}
        public void loadDataFromDB(){
            
            String sdQuery;
            ResultSet studentResults;
            
            try{
                sdQuery = "SELECT * FROM SYSTEM.STUDENT;";
                studentResults = sendDBCommand(sdQuery);
                
                
                while(studentResults.next()){
                    studentData.add(new Student(Integer.parseInt(studentResults.getString(1)),
                            studentResults.getString(2), Integer.parseInt(studentResults.getString(3)),
                            studentResults.getString(4), Double.parseDouble(studentResults.getString(5)),
                            studentResults.getString(6))
                            );
                    
                }
            }
            catch(SQLException e){
                System.out.println(e.toString());
                
            }
            }
            
            
            
           
        
        
       
}	

        




